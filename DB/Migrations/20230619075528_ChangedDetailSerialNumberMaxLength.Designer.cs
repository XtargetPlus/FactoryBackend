// <auto-generated />
using System;
using DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(DbApplicationContext))]
    [Migration("20230619075528_ChangedDetailSerialNumberMaxLength")]
    partial class ChangedDetailSerialNumberMaxLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DB.Model.AccessoryInfo.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("DetailId")
                        .HasColumnType("int");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("OutsideOrganizationId")
                        .HasColumnType("int");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TaskNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TechnologicalProcessItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessoryTypeId");

                    b.HasIndex("DetailId");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OutsideOrganizationId");

                    b.HasIndex("TechnologicalProcessItemId");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("DB.Model.AccessoryInfo.AccessoryEquipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("AccessoryId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId", "AccessoryId");

                    b.HasIndex("AccessoryId");

                    b.ToTable("AccessoryEquipments");
                });

            modelBuilder.Entity("DB.Model.AccessoryInfo.AccessoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("AccessoryTypes");
                });

            modelBuilder.Entity("DB.Model.AccessoryInfo.OutsideOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("OutsideOrganizations");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DetailTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DetailTypeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("UnitId");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.DetailReplaceability", b =>
                {
                    b.Property<int>("FirstDetailId")
                        .HasColumnType("int");

                    b.Property<int>("SecondDetailId")
                        .HasColumnType("int");

                    b.HasKey("FirstDetailId", "SecondDetailId");

                    b.HasIndex("SecondDetailId");

                    b.ToTable("DetailReplaceabilities");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.DetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("DetailTypes");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.DetailsChild", b =>
                {
                    b.Property<int>("FatherId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<float>("Count")
                        .HasColumnType("float");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("FatherId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("DetailsChildren");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "шт"
                        });
                });

            modelBuilder.Entity("DB.Model.ProductInfo.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DB.Model.ProductInfo.ClientProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientProducts");
                });

            modelBuilder.Entity("DB.Model.ProductInfo.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DB.Model.StatusInfo.AccessoryDevelopmentStatus", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("AccessoryId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "StatusId", "AccessoryId");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("StatusId");

                    b.ToTable("AccessoryDevelopmentStatuses");
                });

            modelBuilder.Entity("DB.Model.StatusInfo.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TableName = "users",
                            Title = "Работает"
                        },
                        new
                        {
                            Id = 2,
                            TableName = "tp",
                            Title = "Не в работе"
                        },
                        new
                        {
                            Id = 3,
                            TableName = "users",
                            Title = "Уволен"
                        },
                        new
                        {
                            Id = 4,
                            TableName = "tp",
                            Title = "В работе"
                        },
                        new
                        {
                            Id = 5,
                            TableName = "tp",
                            Title = "Приостановлен"
                        },
                        new
                        {
                            Id = 6,
                            TableName = "tp",
                            Title = "На согласовании"
                        },
                        new
                        {
                            Id = 7,
                            TableName = "tp",
                            Title = "Возврат на доработку"
                        },
                        new
                        {
                            Id = 8,
                            TableName = "tp",
                            Title = "На выдачу"
                        },
                        new
                        {
                            Id = 9,
                            TableName = "tp",
                            Title = "Выдан"
                        },
                        new
                        {
                            Id = 10,
                            TableName = "tp",
                            Title = "Выдан дубликат"
                        },
                        new
                        {
                            Id = 11,
                            TableName = "tp",
                            Title = "Выполнено"
                        });
                });

            modelBuilder.Entity("DB.Model.StatusInfo.TechnologicalProcessStatus", b =>
                {
                    b.Property<int>("TechnologicalProcessId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SubdivisionId")
                        .HasColumnType("int");

                    b.HasKey("TechnologicalProcessId", "UserId", "StatusId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubdivisionId");

                    b.HasIndex("UserId");

                    b.ToTable("TechnologicalProcessStatuses");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.CrossOperationStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CrossOperationStoragePlaceId")
                        .HasColumnType("int");

                    b.Property<int>("VirtualStorageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrossOperationStoragePlaceId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("VirtualStorageId");

                    b.ToTable("CrossOperationStorages");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.CrossOperationStoragePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusyPercent")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CrossOperationStoragePlaces");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.FinishDetailStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("FinishedDetailStoragePlaceId")
                        .HasColumnType("int");

                    b.Property<int>("VirtualStorageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinishedDetailStoragePlaceId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("VirtualStorageId");

                    b.ToTable("FinishDetailStorages");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.FinishedDetailStoragePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Stillage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FinishedDetailStoragePlaces");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.MoveDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("MoveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MoveTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("MovedDetailId")
                        .HasColumnType("int");

                    b.Property<int>("SubdivisionId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologicalProcessItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MoveTypeId");

                    b.HasIndex("MovedDetailId");

                    b.HasIndex("SubdivisionId");

                    b.HasIndex("TechnologicalProcessItemId");

                    b.ToTable("MoveDetails");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.MoveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("MoveTypes");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.VirtualStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("SubdivisionId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologicalProcessItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SubdivisionId");

                    b.HasIndex("TechnologicalProcessItemId");

                    b.ToTable("VirtualStorages");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SubdivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("SubdivisionId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("EquipmentDetails");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentDetailContent", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentDetailId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId", "EquipmentDetailId");

                    b.HasIndex("EquipmentDetailId");

                    b.ToTable("EquipmentDetailContents");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentDetailReplacement", b =>
                {
                    b.Property<int>("EquipmentDetailId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentStatusValueId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("EquipmentDetailId", "EquipmentStatusValueId");

                    b.HasIndex("EquipmentStatusValueId");

                    b.ToTable("EquipmentDetailReplacements");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentFailure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("EquipmentFailures");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentOperation", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologicalProcessItemId")
                        .HasColumnType("int");

                    b.Property<float>("DebugTime")
                        .HasColumnType("float");

                    b.Property<float>("LeadTime")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("EquipmentId", "TechnologicalProcessItemId");

                    b.HasIndex("TechnologicalProcessItemId");

                    b.ToTable("EquipmentsOperations");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("EquipmentParams");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentParamValue", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentParamId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)");

                    b.HasKey("EquipmentId", "EquipmentParamId");

                    b.HasIndex("EquipmentParamId");

                    b.ToTable("EquipmentParamValues");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("DailyTask")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EquipmentDetail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Failure")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FinishDate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PurchaseDetail")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("WorkingPart")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("EquipmentStatuses");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatusUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentStatusId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EquipmentStatusId");

                    b.HasIndex("EquipmentStatusId");

                    b.ToTable("EquipmentStatusUsers");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatusValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DailyTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentFaulureId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPossibleToPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkingPartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentFaulureId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("EquipmentStatusId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("WorkingPartId");

                    b.ToTable("EquipmentStatusValues");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.Subdivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FatherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FatherId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Subdivisions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "15 Отдел разработки программного обеспечения"
                        });
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<byte>("DevelopmentPriority")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateOnly>("FinishDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActual")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("ManufacturingPriority")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("TechnologicalProcesses");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcessDataInfo.BlankType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("BlankTypes");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcessDataInfo.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcessDataInfo.TechnologicalProcessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BlankTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Rate")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TecnologicalProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlankTypeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MaterialId");

                    b.HasIndex("TecnologicalProcessId")
                        .IsUnique();

                    b.ToTable("TechnologicalProcessData");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcessItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("MainTechnologicalProcessItemId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("OperationId")
                        .HasColumnType("int");

                    b.Property<string>("OperationNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("Priority")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("Show")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TechnologicalProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MainTechnologicalProcessItemId");

                    b.HasIndex("OperationId");

                    b.HasIndex("TechnologicalProcessId");

                    b.ToTable("TechnologicalProcessItems");
                });

            modelBuilder.Entity("DB.Model.UserInfo.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Professions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Инженер-программист"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Инженер-технолог 3 категории"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Инженер-технолог 2 категории"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Инженер-технолог 1 категории"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Техник"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Ведущий инженер-технолог"
                        });
                });

            modelBuilder.Entity("DB.Model.UserInfo.RoleClient", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserFormId")
                        .HasColumnType("int");

                    b.Property<bool>("Add")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Browsing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Delete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Edit")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("RoleId", "UserFormId");

                    b.HasIndex("UserFormId");

                    b.ToTable("RoleClients");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserFormId = 1,
                            Add = true,
                            Browsing = true,
                            Delete = true,
                            Edit = true
                        },
                        new
                        {
                            RoleId = 1,
                            UserFormId = 9,
                            Add = true,
                            Browsing = true,
                            Delete = true,
                            Edit = true
                        },
                        new
                        {
                            RoleId = 1,
                            UserFormId = 10,
                            Add = true,
                            Browsing = true,
                            Delete = true,
                            Edit = true
                        });
                });

            modelBuilder.Entity("DB.Model.UserInfo.RoleInfo.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Title = "PDO"
                        },
                        new
                        {
                            Id = 3,
                            Title = "DirectorPDO"
                        },
                        new
                        {
                            Id = 4,
                            Title = "LeadPDO"
                        },
                        new
                        {
                            Id = 5,
                            Title = "DirectorOK"
                        },
                        new
                        {
                            Id = 6,
                            Title = "OK"
                        },
                        new
                        {
                            Id = 7,
                            Title = "technologistDeveloper"
                        });
                });

            modelBuilder.Entity("DB.Model.UserInfo.RoleInfo.UserForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("UserForms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "role"
                        },
                        new
                        {
                            Id = 2,
                            Title = "detail_structure"
                        },
                        new
                        {
                            Id = 3,
                            Title = "detail"
                        },
                        new
                        {
                            Id = 4,
                            Title = "detail-type"
                        },
                        new
                        {
                            Id = 5,
                            Title = "detail_swap"
                        },
                        new
                        {
                            Id = 6,
                            Title = "user"
                        },
                        new
                        {
                            Id = 7,
                            Title = "profession"
                        },
                        new
                        {
                            Id = 8,
                            Title = "subdivision"
                        },
                        new
                        {
                            Id = 9,
                            Title = "user-form"
                        },
                        new
                        {
                            Id = 10,
                            Title = "role_client"
                        },
                        new
                        {
                            Id = 11,
                            Title = "product"
                        },
                        new
                        {
                            Id = 12,
                            Title = "move-type"
                        },
                        new
                        {
                            Id = 13,
                            Title = "status"
                        },
                        new
                        {
                            Id = 14,
                            Title = "equipment-failure"
                        },
                        new
                        {
                            Id = 15,
                            Title = "operation"
                        },
                        new
                        {
                            Id = 16,
                            Title = "blank-type"
                        });
                });

            modelBuilder.Entity("DB.Model.UserInfo.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FFL")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FathersName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SubdivisionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ProfessionNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FFL = "Поляков О.А.",
                            FathersName = "Андреевич",
                            FirstName = "Олег",
                            LastName = "Поляков",
                            Password = "admin1",
                            ProfessionId = 1,
                            ProfessionNumber = "0001-0001",
                            RoleId = 1,
                            StatusId = 1,
                            SubdivisionId = 1
                        },
                        new
                        {
                            Id = 2,
                            FFL = "Скрипка А.В.",
                            FathersName = "Викторович",
                            FirstName = "Андрей",
                            LastName = "Скрипка",
                            Password = "admin2",
                            ProfessionId = 1,
                            ProfessionNumber = "0001-0002",
                            RoleId = 1,
                            StatusId = 1,
                            SubdivisionId = 1
                        },
                        new
                        {
                            Id = 3,
                            FFL = "Фролов И.А.",
                            FathersName = "Алексеевич",
                            FirstName = "Иван",
                            LastName = "Фролов",
                            Password = "admin3",
                            ProfessionId = 1,
                            ProfessionNumber = "0001-0003",
                            RoleId = 1,
                            StatusId = 1,
                            SubdivisionId = 1
                        },
                        new
                        {
                            Id = 4,
                            FFL = "Лобанов М.А.",
                            FathersName = "Александрович",
                            FirstName = "Михаил",
                            LastName = "Лобанов",
                            Password = "admin4",
                            ProfessionId = 1,
                            ProfessionNumber = "0001-0004",
                            RoleId = 1,
                            StatusId = 1,
                            SubdivisionId = 1
                        },
                        new
                        {
                            Id = 5,
                            FFL = "Кулаков В.А.",
                            FathersName = "Андреевич",
                            FirstName = "Виктор",
                            LastName = "Кулаков",
                            Password = "admin5",
                            ProfessionId = 1,
                            ProfessionNumber = "0001-0005",
                            RoleId = 1,
                            StatusId = 1,
                            SubdivisionId = 1
                        });
                });

            modelBuilder.Entity("DB.Model.WorkInfo.EquipmentPlan", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologicalProcessItemId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PlainningData")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("WorkingKind")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("EquipmentId", "TechnologicalProcessItemId");

                    b.HasIndex("TechnologicalProcessItemId");

                    b.ToTable("EquipmentPlans");
                });

            modelBuilder.Entity("DB.Model.WorkInfo.EquipmentSchedule", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingPartId")
                        .HasColumnType("int");

                    b.Property<bool>("CanDebug")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("EquipmentId", "WorkingPartId");

                    b.HasIndex("WorkingPartId");

                    b.ToTable("EquipmentSchedules");
                });

            modelBuilder.Entity("DB.Model.WorkInfo.WorkingPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkingTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorkingParts");
                });

            modelBuilder.Entity("DB.Model.AccessoryInfo.Accessory", b =>
                {
                    b.HasOne("DB.Model.AccessoryInfo.AccessoryType", "AccessoryType")
                        .WithMany("Accessories")
                        .HasForeignKey("AccessoryTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.DetailInfo.Detail", "Detail")
                        .WithMany("Accessories")
                        .HasForeignKey("DetailId");

                    b.HasOne("DB.Model.UserInfo.User", "Developer")
                        .WithMany("Accessories")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.AccessoryInfo.OutsideOrganization", "OutsideOrganization")
                        .WithMany("Accessories")
                        .HasForeignKey("OutsideOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcessItem", "TechnologicalProcessItem")
                        .WithMany("Accessories")
                        .HasForeignKey("TechnologicalProcessItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessoryType");

                    b.Navigation("Detail");

                    b.Navigation("Developer");

                    b.Navigation("OutsideOrganization");

                    b.Navigation("TechnologicalProcessItem");
                });

            modelBuilder.Entity("DB.Model.AccessoryInfo.AccessoryEquipment", b =>
                {
                    b.HasOne("DB.Model.AccessoryInfo.Accessory", "Accessory")
                        .WithMany("AccessoryEquipments")
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.Equipment", "Equipment")
                        .WithMany("AccessoryEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accessory");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.Detail", b =>
                {
                    b.HasOne("DB.Model.DetailInfo.DetailType", "DetailType")
                        .WithMany("Details")
                        .HasForeignKey("DetailTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.DetailInfo.Unit", "Unit")
                        .WithMany("Details")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DetailType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.DetailReplaceability", b =>
                {
                    b.HasOne("DB.Model.DetailInfo.Detail", "FirstDetail")
                        .WithMany("Ins")
                        .HasForeignKey("FirstDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.DetailInfo.Detail", "SecondDetail")
                        .WithMany("Outs")
                        .HasForeignKey("SecondDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstDetail");

                    b.Navigation("SecondDetail");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.DetailsChild", b =>
                {
                    b.HasOne("DB.Model.DetailInfo.Detail", "Child")
                        .WithMany("DetailsFathers")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.DetailInfo.Detail", "Father")
                        .WithMany("DetailsChildren")
                        .HasForeignKey("FatherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Father");
                });

            modelBuilder.Entity("DB.Model.ProductInfo.ClientProduct", b =>
                {
                    b.HasOne("DB.Model.ProductInfo.Client", "Client")
                        .WithMany("ClientProducts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.ProductInfo.Product", "Product")
                        .WithMany("ClientProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DB.Model.ProductInfo.Product", b =>
                {
                    b.HasOne("DB.Model.DetailInfo.Detail", "Detail")
                        .WithMany("Products")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("DB.Model.StatusInfo.AccessoryDevelopmentStatus", b =>
                {
                    b.HasOne("DB.Model.AccessoryInfo.Accessory", "Accessory")
                        .WithMany("AccessoryDevelopmentStatuses")
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.StatusInfo.Status", "Status")
                        .WithMany("AccessoryDevelopmentStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.UserInfo.User", "User")
                        .WithMany("AccessoryDevelopmentStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accessory");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Model.StatusInfo.TechnologicalProcessStatus", b =>
                {
                    b.HasOne("DB.Model.StatusInfo.Status", "Status")
                        .WithMany("TechnologicalProcessStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.SubdivisionInfo.Subdivision", "Subdivision")
                        .WithMany("TechnologicalProcessStatuses")
                        .HasForeignKey("SubdivisionId");

                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcess", "TechnologicalProcess")
                        .WithMany("TechnologicalProcessStatuses")
                        .HasForeignKey("TechnologicalProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Model.UserInfo.User", "User")
                        .WithMany("TechnologicalProcessStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Subdivision");

                    b.Navigation("TechnologicalProcess");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.CrossOperationStorage", b =>
                {
                    b.HasOne("DB.Model.StorageInfo.CrossOperationStoragePlace", "CrossOperationStoragePlace")
                        .WithMany("CrossOperationStorages")
                        .HasForeignKey("CrossOperationStoragePlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.StorageInfo.VirtualStorage", "VirtualStorage")
                        .WithMany("CrossOperationStorages")
                        .HasForeignKey("VirtualStorageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CrossOperationStoragePlace");

                    b.Navigation("VirtualStorage");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.FinishDetailStorage", b =>
                {
                    b.HasOne("DB.Model.StorageInfo.FinishedDetailStoragePlace", "FinishedDetailStoragePlace")
                        .WithMany("FinishDetailStorages")
                        .HasForeignKey("FinishedDetailStoragePlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.StorageInfo.VirtualStorage", "VirtualStorage")
                        .WithMany("FinishDetailStorages")
                        .HasForeignKey("VirtualStorageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinishedDetailStoragePlace");

                    b.Navigation("VirtualStorage");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.MoveDetail", b =>
                {
                    b.HasOne("DB.Model.StorageInfo.MoveType", "MoveType")
                        .WithMany("MoveDetail")
                        .HasForeignKey("MoveTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.StorageInfo.MoveDetail", "MovedDetail")
                        .WithMany()
                        .HasForeignKey("MovedDetailId");

                    b.HasOne("DB.Model.SubdivisionInfo.Subdivision", "Subdivision")
                        .WithMany("MoveDetails")
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcessItem", "TechnologicalProcessItem")
                        .WithMany("MoveDetail")
                        .HasForeignKey("TechnologicalProcessItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MoveType");

                    b.Navigation("MovedDetail");

                    b.Navigation("Subdivision");

                    b.Navigation("TechnologicalProcessItem");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.VirtualStorage", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.Subdivision", "Subdivision")
                        .WithMany("VirtualStorages")
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcessItem", "TechnologicalProcessItem")
                        .WithMany("VirtualStorages")
                        .HasForeignKey("TechnologicalProcessItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subdivision");

                    b.Navigation("TechnologicalProcessItem");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.Equipment", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.Subdivision", "Subdivision")
                        .WithMany("Equipments")
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentDetailContent", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentDetail", "EquipmentDetail")
                        .WithMany("EquipmentDetailContents")
                        .HasForeignKey("EquipmentDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.Equipment", "Equipment")
                        .WithMany("EquipmentDetailContents")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("EquipmentDetail");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentDetailReplacement", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentDetail", "EquipmentDetail")
                        .WithMany("EquipmentDetailReplacements")
                        .HasForeignKey("EquipmentDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatusValue", "EquipmentStatusValue")
                        .WithMany("EquipmentDetailReplacements")
                        .HasForeignKey("EquipmentStatusValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EquipmentDetail");

                    b.Navigation("EquipmentStatusValue");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentOperation", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.Equipment", "Equipment")
                        .WithMany("EquipmentOperations")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcessItem", "TechnologicalProcessItem")
                        .WithMany("EquipmentOperations")
                        .HasForeignKey("TechnologicalProcessItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("TechnologicalProcessItem");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentParamValue", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.Equipment", "Equipment")
                        .WithMany("EquipmentParamValues")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentParam", "EquipmentParam")
                        .WithMany("EquipmentParamValues")
                        .HasForeignKey("EquipmentParamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("EquipmentParam");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatus", b =>
                {
                    b.HasOne("DB.Model.StatusInfo.Status", "Status")
                        .WithMany("EquipmentStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatusUser", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatus", "EquipmentStatus")
                        .WithMany("EquipmentStatusUsers")
                        .HasForeignKey("EquipmentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.UserInfo.User", "User")
                        .WithMany("EquipmentStatusUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EquipmentStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatusValue", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentFailure", "EquipmentFailure")
                        .WithMany("EquipmentStatusValues")
                        .HasForeignKey("EquipmentFaulureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.Equipment", "Equipment")
                        .WithMany("EquipmentStatusValues")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatus", "EquipmentStatus")
                        .WithMany("EquipmentStatusValues")
                        .HasForeignKey("EquipmentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.UserInfo.User", "User")
                        .WithMany("EquipmentStatusValues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.WorkInfo.WorkingPart", "WorkingPart")
                        .WithMany("EquipmentStatusValues")
                        .HasForeignKey("WorkingPartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Equipment");

                    b.Navigation("EquipmentFailure");

                    b.Navigation("EquipmentStatus");

                    b.Navigation("User");

                    b.Navigation("WorkingPart");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.Subdivision", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.Subdivision", "Father")
                        .WithMany("Subdivisions")
                        .HasForeignKey("FatherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Father");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcess", b =>
                {
                    b.HasOne("DB.Model.DetailInfo.Detail", "Detail")
                        .WithMany("TechnologicalProcesses")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.UserInfo.User", "Developer")
                        .WithMany("TechnologicalProcesses")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcessDataInfo.TechnologicalProcessData", b =>
                {
                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcessDataInfo.BlankType", "BlankType")
                        .WithMany("TechnologicalProcessData")
                        .HasForeignKey("BlankTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcessDataInfo.Material", "Material")
                        .WithMany("TechnologicalProcessData")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcess", "TecnologicalProcess")
                        .WithOne("TechnologicalProcessData")
                        .HasForeignKey("DB.Model.TechnologicalProcessInfo.TechnologicalProcessDataInfo.TechnologicalProcessData", "TecnologicalProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlankType");

                    b.Navigation("Material");

                    b.Navigation("TecnologicalProcess");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcessItem", b =>
                {
                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcessItem", "MainTechnologicalProcessItem")
                        .WithMany("BranchesTechnologicalProcessItems")
                        .HasForeignKey("MainTechnologicalProcessItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB.Model.TechnologicalProcessInfo.Operation", "Operation")
                        .WithMany("TechnologicalProcessItems")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcess", "TechnologicalProcess")
                        .WithMany("TechnologicalProcessItems")
                        .HasForeignKey("TechnologicalProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainTechnologicalProcessItem");

                    b.Navigation("Operation");

                    b.Navigation("TechnologicalProcess");
                });

            modelBuilder.Entity("DB.Model.UserInfo.RoleClient", b =>
                {
                    b.HasOne("DB.Model.UserInfo.RoleInfo.Role", "Role")
                        .WithMany("RoleClients")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Model.UserInfo.RoleInfo.UserForm", "UserForm")
                        .WithMany("RoleClients")
                        .HasForeignKey("UserFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserForm");
                });

            modelBuilder.Entity("DB.Model.UserInfo.User", b =>
                {
                    b.HasOne("DB.Model.UserInfo.Profession", "Profession")
                        .WithMany("Users")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.UserInfo.RoleInfo.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB.Model.StatusInfo.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.SubdivisionInfo.Subdivision", "Subdivision")
                        .WithMany("Users")
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profession");

                    b.Navigation("Role");

                    b.Navigation("Status");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("DB.Model.WorkInfo.EquipmentPlan", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.Equipment", "Equipment")
                        .WithMany("EquipmentPlans")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.TechnologicalProcessInfo.TechnologicalProcessItem", "TechnologicalProcessItem")
                        .WithMany("EquipmentPlans")
                        .HasForeignKey("TechnologicalProcessItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("TechnologicalProcessItem");
                });

            modelBuilder.Entity("DB.Model.WorkInfo.EquipmentSchedule", b =>
                {
                    b.HasOne("DB.Model.SubdivisionInfo.EquipmentInfo.Equipment", "Equipment")
                        .WithMany("EquipmentSchedules")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DB.Model.WorkInfo.WorkingPart", "WorkingPart")
                        .WithMany("EquipmentSchedules")
                        .HasForeignKey("WorkingPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("WorkingPart");
                });

            modelBuilder.Entity("DB.Model.AccessoryInfo.Accessory", b =>
                {
                    b.Navigation("AccessoryDevelopmentStatuses");

                    b.Navigation("AccessoryEquipments");
                });

            modelBuilder.Entity("DB.Model.AccessoryInfo.AccessoryType", b =>
                {
                    b.Navigation("Accessories");
                });

            modelBuilder.Entity("DB.Model.AccessoryInfo.OutsideOrganization", b =>
                {
                    b.Navigation("Accessories");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.Detail", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("DetailsChildren");

                    b.Navigation("DetailsFathers");

                    b.Navigation("Ins");

                    b.Navigation("Outs");

                    b.Navigation("Products");

                    b.Navigation("TechnologicalProcesses");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.DetailType", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("DB.Model.DetailInfo.Unit", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("DB.Model.ProductInfo.Client", b =>
                {
                    b.Navigation("ClientProducts");
                });

            modelBuilder.Entity("DB.Model.ProductInfo.Product", b =>
                {
                    b.Navigation("ClientProducts");
                });

            modelBuilder.Entity("DB.Model.StatusInfo.Status", b =>
                {
                    b.Navigation("AccessoryDevelopmentStatuses");

                    b.Navigation("EquipmentStatuses");

                    b.Navigation("TechnologicalProcessStatuses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.CrossOperationStoragePlace", b =>
                {
                    b.Navigation("CrossOperationStorages");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.FinishedDetailStoragePlace", b =>
                {
                    b.Navigation("FinishDetailStorages");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.MoveType", b =>
                {
                    b.Navigation("MoveDetail");
                });

            modelBuilder.Entity("DB.Model.StorageInfo.VirtualStorage", b =>
                {
                    b.Navigation("CrossOperationStorages");

                    b.Navigation("FinishDetailStorages");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.Equipment", b =>
                {
                    b.Navigation("AccessoryEquipments");

                    b.Navigation("EquipmentDetailContents");

                    b.Navigation("EquipmentOperations");

                    b.Navigation("EquipmentParamValues");

                    b.Navigation("EquipmentPlans");

                    b.Navigation("EquipmentSchedules");

                    b.Navigation("EquipmentStatusValues");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentDetail", b =>
                {
                    b.Navigation("EquipmentDetailContents");

                    b.Navigation("EquipmentDetailReplacements");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentFailure", b =>
                {
                    b.Navigation("EquipmentStatusValues");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentParam", b =>
                {
                    b.Navigation("EquipmentParamValues");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatus", b =>
                {
                    b.Navigation("EquipmentStatusUsers");

                    b.Navigation("EquipmentStatusValues");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.EquipmentInfo.EquipmentStatusValue", b =>
                {
                    b.Navigation("EquipmentDetailReplacements");
                });

            modelBuilder.Entity("DB.Model.SubdivisionInfo.Subdivision", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("MoveDetails");

                    b.Navigation("Subdivisions");

                    b.Navigation("TechnologicalProcessStatuses");

                    b.Navigation("Users");

                    b.Navigation("VirtualStorages");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.Operation", b =>
                {
                    b.Navigation("TechnologicalProcessItems");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcess", b =>
                {
                    b.Navigation("TechnologicalProcessData")
                        .IsRequired();

                    b.Navigation("TechnologicalProcessItems");

                    b.Navigation("TechnologicalProcessStatuses");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcessDataInfo.BlankType", b =>
                {
                    b.Navigation("TechnologicalProcessData");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcessDataInfo.Material", b =>
                {
                    b.Navigation("TechnologicalProcessData");
                });

            modelBuilder.Entity("DB.Model.TechnologicalProcessInfo.TechnologicalProcessItem", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("BranchesTechnologicalProcessItems");

                    b.Navigation("EquipmentOperations");

                    b.Navigation("EquipmentPlans");

                    b.Navigation("MoveDetail");

                    b.Navigation("VirtualStorages");
                });

            modelBuilder.Entity("DB.Model.UserInfo.Profession", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DB.Model.UserInfo.RoleInfo.Role", b =>
                {
                    b.Navigation("RoleClients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DB.Model.UserInfo.RoleInfo.UserForm", b =>
                {
                    b.Navigation("RoleClients");
                });

            modelBuilder.Entity("DB.Model.UserInfo.User", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("AccessoryDevelopmentStatuses");

                    b.Navigation("EquipmentStatusUsers");

                    b.Navigation("EquipmentStatusValues");

                    b.Navigation("TechnologicalProcessStatuses");

                    b.Navigation("TechnologicalProcesses");
                });

            modelBuilder.Entity("DB.Model.WorkInfo.WorkingPart", b =>
                {
                    b.Navigation("EquipmentSchedules");

                    b.Navigation("EquipmentStatusValues");
                });
#pragma warning restore 612, 618
        }
    }
}
